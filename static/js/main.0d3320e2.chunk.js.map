{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAsBeA,EAnBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKA,GAAIA,EAAIC,UAAU,sDAAvB,UACI,qBACIC,IAAG,+BAA0BF,EAA1B,YACHG,IAAG,UAAKL,EAAL,kCAEP,gCACI,6BACKA,IAEL,4BACKC,WCYNK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAGQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CACIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAGZM,EAAOG,GAAGR,UCH5BS,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,4BACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCUXI,EAjBA,SAACC,GACZ,OAGI,aAFA,CAEA,OAAKC,MACD,CACIC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJhB,SAOKJ,EAAMK,YCgCJC,G,wDAtCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAZ1C,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IALP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEnB,OAAQ4B,S,oBAM/C,WACI,MAAgCC,KAAKN,MAA7BvB,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,YACVU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAEzD,OAAQjC,EAAOmC,OAGP,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,2BAAd,yBAGA,cAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ8B,SAR9B,gD,GAxBMM,c,MCAlBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0d3320e2.chunk.js","sourcesContent":["import React from 'react';\n\n// destructuring props as we pass them, now we dont have to say props.name etc..\nconst Card = ({ name, email, id }) => {\n    return (\n        <div id={id} className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img\n                src={`https://robohash.org/${id}?200x200`}\n                alt={`${name} the robot personal headshot`}\n            />\n            <div>\n                <h2>\n                    {name}\n                </h2>\n                <p>\n                    {email}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n// argument robots is from robots.js array of objects\n// we used destructuring because we just simply need that array and nothing else from the file\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                // return an array of Robots using robots array\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                            // provide a unique key for React, in our case the id property of the object\n                            // we use a key to minimize the amount of DOM manipulation\n                            key={robots[i].id}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className='ba bw2 b--light-green pa2'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        // style is a javascript expression,\n        // that is a js obj that contains CSS rules\n        <div style={\n            {\n                overflowY: 'scroll',\n                border: '1px solid black',\n                height: '500px',\n            }\n        }>\n            {props.children}\n        </div>\n    );\n}\n\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        // this is what describes our app, these 'things' can change state\n        this.state = {\n            robots: [],\n            searchfield: ''\n        };\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }))\n    }\n    // the method for filtering our robots in the input area\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        return !robots.length ?\n            <h1>Loading...</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1 lh-title f-headline-l'>\n                        RoboFriends\n                    </h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}